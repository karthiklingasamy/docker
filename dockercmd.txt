what is containers Containers?

Containers are completely isolated environment. They have their own 
 1. Processes/services
 2. Network
 3. Mounts

Running instance of image



> docker version
> docker run nginx
> docker ps (list running container)
> docker ps -a (To see all the containers that exited)
> docker stop <container Name>/<container ID>
> docker rm <container Name>/<container ID> (To remove the unwanted container to gain space)
> docker images (list images)
> docker rmi nginx (remove image. use must stop all the dependent container before remove images)
> docker pull nginx (Only pull the image and not run the conatiner)
> docker run mmumshad/ansible-playable (if you are using your own images the run the below command start with your userid/image)
> docker run -d centos sleep 20

Unlike Virtual machines containers are not ment to host virtual system. Containers are ment to run specific task or process
such to host the instance of the application server or database or some kind on computation or analysis task. Once the task is 
completed the container exits. Container only live as long as the process inside it alive. For example the web server inside the
container crashed the container will exits. Thats the reasion when you run a container on ubuntu exits immediatly. Bcz there is no
process running on ubuntu. If you really want to run ubuntu for a while run the below command

> docker run ubuntu sleep 5

Exec - execute a command
------------------------
> docker exec <containetname>/<containerid> cat /etc/hosts (attach mode)

Run - attach and detach
---------------------------
> docker run kodelloud/simple-wenapp
It is running the container on attached mode or fourground. Meaning you will attached to the console or the standard output of the docker container
and you will see the output of the web services screen. you wont be able to do anything on this console untill the docket container stops.
It wont respon to you inputs. Press CTRL + C to stop the container and the application hosted on the container exits and get back to your prompt

> docker run -d <containetname>/<containerid> cat /etc/hosts (detach mode)

Now as soon as you execute the above command you will get the prompt immedialty. The container will continue to run in the background

> docker attach a043d (if you want to attach back to the running container later run this command. Now it comes to fourground and if you press CTRL+C you cant get any prompt)

Run -tag
-------------
> docker run redis:4.0 (If you dont specify any tag docker will assume the tag is latest version of the software)

Run-STDIN
---------------
> docker run -it kodekloud/simple-prompt-docker

Run - PORT mapping
----------------------
docker run kodekloud/webapp
 *Running on http//0.0.0.0:5000/(Press CTRL+C to quit)

1. Docker host have its own IP. Which is (IP: 192.168.1.5)
2. Every docker container has it's own IP. Called Internal IP (Web App Docker Container,IP:172.17.0.2, Port:5000) which is only accessable within the host.
   So if you open the browser within the docker host and type http://172.17.0.2:5000(Internal IP). Since this is internal IP users outside the host can not access 
   the IP. For this scenario we could use dockek host IP which is 192.168.1.5. But for that to work you must have map the port inside the docker container to free port on
   docker host. 
    For Example: 
    If a user want to access my application using port 80. 
    Map the port 80 of the localhost/dockerhost to port 5000 on the docker container using -p parameter in the run command
    Now all traffic of port 80 on my dockerhost will redirected to port 5000 on container

> docker run -p 80:5000 kodekloud/simple-webapp (webapp Instans1)
> docker run -p 8000:5000 kodekloud/simple-webapp (webapp Instans2)
> docker run -p 8001:5000 kodekloud/simple-webapp (webapp Instans3)

> docker run -p 3306:3306 mysql(DB Instans1)
> docker run -p 8306:3306 mysql(DB Instans2)
> docker run -p 8307:3306 mysql(DB Instans3)

 Note: You can not map to the same port on docker host more than once


3. How user access the application host on container?

Run - Volume mapping
---------------------------

> docker run -v /opt/datadir:/var/lib/mysql mysql

Inspect Container
---------------------
> docker inspect <containername>/<containerID>

Container Logs
---------------
> docker logs <containername>/<containerID>


Exercies run container Attach and Detach Mode
-------------------------------------------------
> docker run ubuntu sleep 1500
1. Option 1: Now you will not get the prompt bcz the container is running fourground. You can open new terminial and run docker ps -a cmd and 
   get the container ID . Now you can stop the container
2. Optipn 2: Run the command "docker attach <containerName>/<ContainerID>"


> docker run timer
> docker attach <containername>/<containerid>

http://www.gtlib.gatech.edu/pub/apache/jmeter/binaries/apache-jmeter-5.3.tgz

FROM ubuntu
RUN apt-get update
RUN apt-get install openjdk-8-jdk
RUN apt-get install wget
RUN wget http://www.gtlib.gatech.edu/pub/apache/jmeter/binaries/apache-jmeter-5.3.tgz



docker run --links
--------------------

docker run -d --name=redis redis
docker run -d --name=db postgres
docker run -d --name=vote -p 5000:80 --link redis:redis voting-app
docker run -d --name=result -p 5001:80 --link db:db result-app
docker run -d --name=worker --link db:db --link redis:redis worker

Links is a command line option is used to connect two containers

1. The voting app depens on redis services. When the web server starts it is looking for redis services running on host redis
2. But the voting app container can not resolv the host by the name redis. To make the voting app aware of the redis services 
   we add a link option while running the voting app container to link it to the redis container
   > docker run -d --name=vote -p 5000:80 --link redis:redis voring -app
     1. specify the name of the redis container (--link redis)
     2. specify the name of the host that the voting app is looking for which is also redis in this case (--link redis:redis)
     3. It create an entry on etc host file on the voting app container adding an entry with hostname redis with the internal ip of the redis container
     NOTE: This method is outdated. we have advance feature called docker swarm and networking support better way to achiving this insted of using links

Docker Composefile.yaml (from docker command)
redis:
 image:redis

db:
 image:postgres:9.4
 
vote:
 image:voting-app (build: ./vote)
 ports:
    - 5000:80
 links:
    -redis

 

result:
 image:result (build: ./result)
 ports:
    - 5001:80
 links:
    - db

worker:
 image:worker (build:./worker)
 links:
   - db
   - redis

Docker Compose - Version
-------------------------
version 1: The limitation in version 1. If to want to deploy containers on differenr network other than default bridge network there was no way of specify in this file
           Aslo if you want to specify the order of services to startup (for example database should start fist) is not possable in version 1

Version 2: The format of the file also change little bit. Nolonger need to specify the stack informatiom as you did in version 1. It is all encaputulated in services 
            section. 

Version 3: Support docker swarm


Docker Run--->Docker Compose---->Docker Swarm

Docker Compse
-----------------
1. Install Docker Compose
2. Create Docker Compose yaml file

Docker Private Registry
---------------------------
To be updated

Docker Engine
-----------------
Docker Engine is simply refer to the host on which docker is installed

Docker Engin have 3 component
1. Docker CLI
2. REST API
3. Docker Deamon

To execute docker CLI command from laptop to remote host run the below command
> docker -H=remote-docker-engine:2375

Containerzation
-----------------
How does it work under the hood?
Docker users namespace to isolate workspace 
 * Process ID
 * Network
 * InterProcess Communication
 * Mount
 * UnixTimesharing

Each container has their own namespace (Process ID, Network, Interprocess Communication,Mount,Unixtimesharing) there by providing isolation between containers

How to see the process ID of same services running on host and container?
He is not explained this concept. But i need to revisit this slide to get more detail

cgroups
-----------
How to set limits for each container to use CPU and Memory?
> docker run --cpus=.5 ubuntu (Limits the container not to use more than 50%)
> docker run --memory=100m ubuntu (limit the container not to use more than 100m)

Namespace-PID
-----------------
> docker exec  5a5f6gh ps -eaf (to see the process id of tomcat running on container. Example PID=1)
> ps -eaf|greap docker-java-home (to see the process id of tocat running on host.Example PID=2700)

So containeraziaon is the technology allow these process to be isolated and run container using namespaces


Docker Storage
------------------

Let us see how the docker store data on local file system. When you install docker on local system
It create file system as below
> /var/lib/docker
  auft(folder)
  containers(folder-All files related to container is stored under containers folder)
  images(folder - All files related to images is stored under images folder)
  volumes(folder - All files related to volumes is sored under volumes folder)

Layered Architecture
-------------------------
Each line of instruction in the docker file created a new layer in the docker image(jsut the chages from the previous layer)

Dockerfile                                                              Dockerfile2
FROM Ubuntu 								FROM Ubuntu
RUN apt-get update && apt-get -y install python                         RUN apt-get update && apt-get -y install python
RUN pip install flask flask-mysql                                       RUN pip install flask flask-mysql
COPY . /opt/source-code                                                 COPY app2.py /opt/source-code
ENTRYPOINT FLASK_APP=/opt/source-code/app.py flask run                  ENTRYPOINT FLASK_APP=/opt/source-code/app2.py flask run

docker build Dockerfile -t mumshad/my-custom-app                        docker build Dockerfile -t mumshad/my-custom-app-2

Layer 1. Base Ubuntu Layer       (120MB)                                Layer 1. ******************************
Layer 2. Changes in apt packages (306MB)                                Layer 2. ******************************
Layer 3. Changes in pip packages (6.3MB)                                Layer 3. ******************************
Layer 4. Source Code             (229 B)                                Layer 4. Source Code
Layer 5. Update Entrypoint       (0   B)                                Layer 5. Update Entrypoinr

Since the first 3 layers of the both the application are same docker is not going to build the first three layers.
Instead it reuse the first three layes from the cache and only create the last two layes with the new source
and the new entrypoint. This way docker build image fast and effeciently same the disk space. 
This is also applicable to if you update your source code. Whenever you update you application code such as app.py
docker simply reuse all the previous layes from the cache and quickly rebuild the images by updating the latest
source code. Thus saving lot of time during rebuild images

Image Layer -> ReadOnly
Container Layer -> Read Write

Volume Mounting & Bind Mounting
-----------------------------------
Volume Mount - Mount a volumes from the volumes directory 
Bind Mount - Mount a directory from any location on the docker host


Docker Volumes (Volume Mounting)
---------------------------------
All the files and folders gets deleted once to remove the container
What if you want to presist the data?
> docker volume create data_volume
> /var/lib/docker
  >volumes
    >data_volume

> docker run -v data_volume:/var/lib/mysql mysql

This will create a new container and mount data volume (data_volume) we create into var/lib/mysql folder inside the container
So all data return by the database is stored on volume created on the docker host. Even if the container is destroyed the 
data is still active

What if you did not run docker volume create command to create the volum before the docker run command?
> docker run -v data_volume2:/var/lib/mysql mysql

Docker automatically create a volume (data_volume2) and automatically mount to the container

Bind Mounting
-------------
What if our data is already on another location. Forexample we have an external storage on the docker host @/data and we 
would like to stote database data on that volume and not on the default /var/lib/docker/volumes?
> docker run -v data/mysql :/var/lib/mysql mysql (This already i know :) )

Run the below command is the most preffered way and it is more verbose

> docker run --mount type=bind,source=/data/mysql,target=/var/lib/mysql mysql


Storage Drivers (Perform Creat the layer, Maintain the layer files related to each layer)
-----------------
1. AUFS
2. ZFS
3. BRRFS
4. Device Mapper
5. Overlay
6. Overlay2

> docker info (display info abut storage layer)

Storage/FileSystem Demo
-------------------------
When docker is installed it automatically create the below default structure
>ls -l /var/lib/docker

1.  aufs
2.  builder
3.  containers
4.  images
5.  network
6.  plugins
7.  swarm
8.  tmp
9.  trust
10. volumes

> docker history <imageID> (Very very important cmd used to see how the image was build)
> var/lib/docker/aufs/diff/aa6dc (Kind of hack)

Docker Disk Usage
-------------------
It shows you disk usage by Images,Containers and Volumes
> docker system df

> docker system df -v (Breakdown by images)


Docker Container Orchestration
----------------------------------

> docker service create --replicas=100 nodejs

1. docker swarm
2. kubernates
3. MESOS

docker swarm
---------------




















  








     



























